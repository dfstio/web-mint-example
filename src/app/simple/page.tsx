"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/meOJO2JP0CY
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import { useDropzone } from "react-dropzone";
import React, { useState } from "react";
import { simpleMintNFT } from "@/lib/simple";
import { ProofOfNFT } from "@/lib/send";

export default function Mint() {
  const [image, setImage] = useState<File | undefined>(undefined);
  const [url, setUrl] = useState<string | undefined>(undefined);
  const [name, setName] = useState<string>("");
  const [description, setDescription] = useState<string>("");
  const [collection, setCollection] = useState<string>("");
  const [price, setPrice] = useState<number>(0);
  const [keys, setKeys] = useState<ProofOfNFT[]>([]);

  const onDrop = (acceptedFiles: File[]) => {
    console.log(acceptedFiles);
    if (acceptedFiles.length > 0) {
      setImage(acceptedFiles[0]);
      setUrl(URL.createObjectURL(acceptedFiles[0]));
    }
  };
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    multiple: false,
    accept: { "image/*": [".jpg", ".jpeg", ".png", ".gif", ".webp"] },
  });

  const mint = async () => {
    console.log("NFT:", { name, image, keys, description, collection, price });
    if (image === undefined) {
      console.error("Image is undefined");
      return;
    }
    await simpleMintNFT({
      name,
      image,
      collection,
      description,
      price,
      keys,
      developer: "DFST",
      repo: "web-mint-example",
    });
  };

  return (
    <div className="bg-[#0D1117] p-8 text-white flex justify-center items-start">
      <div className="flex flex-col space-y-6 mr-8" {...getRootProps()}>
        {url && (
          <img
            src={url}
            alt="Preview"
            className="w-[341.33px] h-64 bg-[#30363D] rounded-lg"
          />
        )}
        {url && (
          <div className="bg-[#161B22] p-4 rounded-lg flex flex-col items-center space-y-2">
            <label
              htmlFor="photo-upload"
              className="cursor-pointer flex items-center space-x-2"
            >
              <CameraIcon className="text-[#8B949E] h-5 w-5" />
              <span className="text-sm">
                {isDragActive ? "Drop image here" : "Change image"}
              </span>
            </label>
            <input id="image-upload" className="hidden" {...getInputProps()} />
          </div>
        )}
        {url && (
          <div className="bg-[#161B22] p-4 rounded-lg flex flex-col items-center space-y-2">
            <div className="flex items-center space-x-2">
              <CloudLightningIcon className="text-[#8B949E] h-8 w-8" />
              <span className="text-sm">Generate an image with AI</span>
            </div>
          </div>
        )}
        {!url && (
          <div className="bg-[#161B22] p-4 rounded-lg flex flex-col items-center space-y-2">
            <label
              htmlFor="photo-upload"
              className="cursor-pointer flex items-center space-x-2"
            >
              <CameraIcon className="text-[#8B949E] h-5 w-5" />
              <span className="text-sm">
                {isDragActive ? "Drop image here" : "Add image"}
              </span>
            </label>
            <input id="image-upload" className="hidden" {...getInputProps()} />
            <div className="w-[341.33px] h-64 bg-[#30363D] rounded-lg flex items-center justify-center" />
          </div>
        )}
        {!url && (
          <div className="bg-[#161B22] p-4 rounded-lg flex flex-col items-center space-y-2">
            <div className="flex items-center space-x-2">
              <CloudLightningIcon className="text-[#8B949E] h-8 w-8" />
              <span className="text-sm">Generate an image with AI</span>
            </div>
          </div>
        )}
      </div>

      <div className="flex flex-col space-y-4">
        <div className="space-y-2">
          <div className="flex items-center">
            <h1 className="text-2xl font-bold">Create an NFT</h1>
          </div>
          <p className="text-[#8B949E]">
            Mint a MinaNFT using an existing image or generate with AI new
            image.{" "}
            <a href="#" className="text-blue-500">
              Learn more
            </a>
          </p>
        </div>
        <div className="overflow-y-auto max-h-[500px] space-y-6 scrollbar-thumb-[#30363D] scrollbar-track-[#161B22]">
          <div className="w-[calc(100%*9/10)]">
            <label htmlFor="name" className="block text-sm font-medium">
              Name *
            </label>
            <input
              id="name"
              type="text"
              placeholder="Name"
              maxLength={30}
              className="bg-[#161B22] text-white border border-gray-200 border-[#30363D] rounded-md p-2 w-full dark:border-gray-800"
              onChange={(e) => setName(e.target.value)}
            />
          </div>
          <div className="w-[calc(100%*9/10)]">
            <label htmlFor="collection" className="block text-sm font-medium">
              Collection
            </label>
            <input
              id="collection"
              type="text"
              placeholder="Collection name"
              className="bg-[#161B22] text-white border border-gray-200 border-[#30363D] rounded-md p-2 w-full dark:border-gray-800"
              onChange={(e) => setCollection(e.target.value)}
            />
          </div>
          <div className="w-[calc(100%*9/10)]">
            <label htmlFor="price" className="block text-sm font-medium">
              Set price
            </label>
            <div className="flex items-center bg-[#161B22] border border-gray-200 border-[#30363D] rounded-md p-2 w-full dark:border-gray-800">
              <input
                id="price"
                type="text"
                placeholder="Enter a price"
                className="bg-transparent text-white w-full"
                onChange={(e) => setPrice(parseFloat(e.target.value))}
              />
              <span className="text-sm font-medium ml-2">MINA</span>
            </div>
          </div>
          <div className="w-[calc(100%*9/10)]">
            <label htmlFor="description" className="block text-sm font-medium">
              Description
            </label>
            <textarea
              id="description"
              placeholder="Description (optional)"
              className="bg-[#161B22] text-white border border-gray-200 border-[#30363D] rounded-md p-2 w-full h-24 dark:border-gray-800"
              onChange={(e) => setDescription(e.target.value)}
            />
          </div>
          <div className="w-[calc(100%*9/10)] flex items-center">
            <h3 className="text-lg font-medium">Proof of NFT</h3>
            <button
              className="bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg text-sm px-2 py-1 flex items-center ml-3"
              onClick={() =>
                setKeys((prev) => {
                  return [...prev, { key: "", value: "", isPublic: false }];
                })
              }
            >
              <PlusIcon className="h-4 w-4 mr-1" />
            </button>
          </div>
          {keys.map((key, index) => (
            <div key={`ProofOfNFT-${index}`}>
              <div className="w-[calc(100%*2/3)]">
                <label htmlFor="key" className="block text-sm font-medium">
                  Key
                </label>
                <input
                  id="key"
                  type="text"
                  placeholder="Key"
                  className="bg-[#161B22] text-white border border-gray-200 border-[#30363D] rounded-md p-2 w-full dark:border-gray-800"
                  onChange={(e) =>
                    setKeys((prev) => {
                      const newKeys = prev;
                      newKeys[index].key = e.target.value;
                      return newKeys;
                    })
                  }
                />
              </div>
              <div className="w-[calc(100%*2/3)]">
                <label htmlFor="value" className="block text-sm font-medium">
                  Value
                </label>
                <input
                  id="value"
                  type="text"
                  placeholder="Value"
                  className="bg-[#161B22] text-white border border-gray-200 border-[#30363D] rounded-md p-2 w-full dark:border-gray-800"
                  onChange={(e) =>
                    setKeys((prev) => {
                      const newKeys = prev;
                      newKeys[index].value = e.target.value;
                      return newKeys;
                    })
                  }
                />
              </div>
              <div className="w-[calc(100%*2/3)] flex items-center">
                <input
                  id="public"
                  type="checkbox"
                  className="bg-[#161B22] text-white border border-gray-200 border-[#30363D] rounded-md p-2 mr-2 dark:border-gray-800"
                  onChange={(e) =>
                    setKeys((prev) => {
                      const newKeys = prev;
                      newKeys[index].isPublic = e.target.checked;
                      return newKeys;
                    })
                  }
                />
                <label htmlFor="public" className="block text-sm font-medium">
                  Public
                </label>
              </div>
            </div>
          ))}
        </div>
        <button
          className="bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg text-sm px-5 py-2.5 text-center w-[calc(100%*9/10)] disabled:opacity-50 disabled:cursor-not-allowed"
          onClick={mint}
          disabled={name === "" || url === undefined ? true : false}
        >
          Mint
        </button>
      </div>
    </div>
  );
}

function CameraIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z" />
      <circle cx="12" cy="13" r="3" />
    </svg>
  );
}

function CloudLightningIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973" />
      <path d="m13 12-3 5h4l-3 5" />
    </svg>
  );
}

function PlusIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}
